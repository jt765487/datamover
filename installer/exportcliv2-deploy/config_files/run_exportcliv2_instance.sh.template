#!/bin/bash
set -euo pipefail

# Wrapper script for {{APP_NAME}} instance: $1 (passed by systemd as %i)
# Executed as {{APP_USER}}

# --- Instance Name from Argument ---
if [[ -z "$1" ]]; then
  # Log to stderr (for immediate journalctl context) and syslog (for alerting/filtering)
  echo "Error: Instance name argument (%i) not provided to wrapper script." >&2
  logger -t "{{APP_NAME}}" -p daemon.error "Instance name argument (%i) not provided to wrapper script."
  exit 78 # EX_CONFIG
fi
INSTANCE_NAME="$1"
LOGGER_TAG="{{APP_NAME}}@${INSTANCE_NAME}"

# --- Log script start (optional but helpful) ---
echo "Wrapper script for ${LOGGER_TAG} starting..."

# --- Constants ---
# A value of -1 indicates the application should run indefinitely with no end time.
readonly INDEFINITE_RUN_ARG="-1"

# --- Sanity check required environment variables ---
# These are expected to be set by systemd via EnvironmentFile directives
# (e.g., from {{ETC_DIR}}/common.auth.conf and {{ETC_DIR}}/${INSTANCE_NAME}.conf)
required_vars=(
  "EXPORT_AUTH_TOKEN_U"
  "EXPORT_AUTH_TOKEN_P"
  "EXPORT_TIMEOUT"
  "EXPORT_SOURCE" # Used to build -o path
  "EXPORT_IP"
  "EXPORT_PORTID"
  "EXPORT_APP_CONFIG_FILE_PATH"
  "EXPORT_STARTTIME_OFFSET_SPEC"
)
for var_name in "${required_vars[@]}"; do
  if [[ -z "${!var_name:-}" ]]; then # Indirect expansion
    error_msg="Required environment variable '${var_name}' is not set. Check {{ETC_DIR}}/common.auth.conf and {{ETC_DIR}}/${INSTANCE_NAME}.conf."
    echo "Error: ${LOGGER_TAG}: ${error_msg}" >&2
    logger -t "${LOGGER_TAG}" -p daemon.error "${error_msg}"
    exit 78 # EX_CONFIG
  fi
done

# --- Calculate dynamic start time ---
# Uses EXPORT_STARTTIME_OFFSET_SPEC from the environment.
# The 'if !' construct is safer than checking for empty output.
if ! calculated_start_time=$(date +%s%3N --date="${EXPORT_STARTTIME_OFFSET_SPEC}"); then
  error_msg="Could not calculate start_time using EXPORT_STARTTIME_OFFSET_SPEC ('${EXPORT_STARTTIME_OFFSET_SPEC}')."
  echo "Error: ${LOGGER_TAG}: ${error_msg}" >&2
  logger -t "${LOGGER_TAG}" -p daemon.error "${error_msg}"
  exit 78 # EX_CONFIG
fi

# --- Check if the app-specific config file actually exists ---
if [[ ! -f "${EXPORT_APP_CONFIG_FILE_PATH}" ]]; then
    error_msg="Application specific config file specified by EXPORT_APP_CONFIG_FILE_PATH ('${EXPORT_APP_CONFIG_FILE_PATH}') does not exist."
    echo "Error: ${LOGGER_TAG}: ${error_msg}" >&2
    logger -t "${LOGGER_TAG}" -p daemon.error "${error_msg}"
    exit 78 # EX_CONFIG
fi

# --- Construct paths and arguments ---
CSV_INSTANCE_DIR="{{CSV_DATA_DIR}}/${INSTANCE_NAME}"
SOURCE_INSTANCE_PATH="{{SOURCE_DATA_DIR}}/${EXPORT_SOURCE}"

# Build the argument list in an array for robustness and clarity.
# This array contains the REAL credentials and will be used for execution.
args=(
  "-c" "${EXPORT_APP_CONFIG_FILE_PATH}"
  "-u" "${EXPORT_AUTH_TOKEN_U}"
  "-p" "${EXPORT_AUTH_TOKEN_P}"
  "-C"
  -t "${EXPORT_TIMEOUT}"
  -H "${CSV_INSTANCE_DIR}"
  -o "${SOURCE_INSTANCE_PATH}"
  "${EXPORT_IP}"
  "${EXPORT_PORTID}"
  "${calculated_start_time}"
  "${INDEFINITE_RUN_ARG}"
)

# --- Create a sanitized version of the command for logging ---
# This iterates through the real arguments and replaces sensitive values.
log_args_safe=()
skip_next=false
for arg in "${args[@]}"; do
  if [[ "$skip_next" == true ]]; then
    skip_next=false
    continue
  fi

  case "$arg" in
    -u|-p)
      log_args_safe+=("$arg" "'***'") # Add the flag and the mask
      skip_next=true # Tell the loop to ignore the next item (the real token)
      ;;
    *)
      # Use printf %q to quote the argument exactly as the shell would need it.
      # This handles spaces and special characters safely.
      log_args_safe+=("$(printf '%q' "$arg")")
      ;;
  esac
done

# --- Log the final, sanitized command string ---
printf "Executing for %s:\n  %q %s\n" \
  "${INSTANCE_NAME}" \
  "{{SYMLINK_EXECUTABLE_PATH}}" \
  "${log_args_safe[*]}"

# --- Execute the main application binary ---
# The shell expands "${args[@]}" into separate, quoted arguments.
exec "{{SYMLINK_EXECUTABLE_PATH}}" "${args[@]}"

# If exec fails, this script will exit.
# If exec succeeds, this part is never reached.
exit $?